apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clone-code
  labels:
    app.kubernetes.io/version: "0.7"
  annotations:
    tekton.dev/pipelines.minVersion: "0.29.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "clone code"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.
    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "1"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
      type: string
      default: "ca-bundle.crt"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: url
      description: The precise URL that was fetched by this Task.
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
      - name: HOME
        value: "$(params.userHome)"
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REVISION
        value: $(params.revision)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_SUBMODULES
        value: $(params.submodules)
      - name: PARAM_DEPTH
        value: $(params.depth)
      - name: PARAM_SSL_VERIFY
        value: $(params.sslVerify)
      - name: PARAM_CRT_FILENAME
        value: $(params.crtFileName)
      - name: PARAM_SUBDIRECTORY
        value: $(params.subdirectory)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_HTTP_PROXY
        value: $(params.httpProxy)
      - name: PARAM_HTTPS_PROXY
        value: $(params.httpsProxy)
      - name: PARAM_NO_PROXY
        value: $(params.noProxy)
      - name: PARAM_VERBOSE
        value: $(params.verbose)
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
        value: $(params.sparseCheckoutDirectories)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
        value: $(workspaces.basic-auth.path)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eu
        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi
        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi
        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi
        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"
        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }
        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi
        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"
        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  creationTimestamp: null
  name: build-and-publish
spec:
  tasks:
  - name: source-upload
    params:
    - name: url
      value: https://github.com/cloudfoundry-samples/test-app
    taskRef:
      name: clone-code
    workspaces:
    - name: output
      workspace: output
  - name: push
    params:
    - name: RUN_IMAGE
      value: cloudfoundry/cflinuxfs3@sha256:5219e9e30000e43e5da17906581127b38fa6417f297f522e332a801e737928f5
    - name: BUILDER_IMAGE
      value: cloudfoundry/cflinuxfs3@sha256:5219e9e30000e43e5da17906581127b38fa6417f297f522e332a801e737928f5
    - name: SKIP_DETECT
      value: "false"
    - name: IMAGE_DESTINATION
      value: gcr.io/kf-source/testbuild
    - name: BUILDPACKS
      value: https://github.com/cloudfoundry/staticfile-buildpack,https://github.com/cloudfoundry/java-buildpack,https://github.com/cloudfoundry/ruby-buildpack,https://github.com/cloudfoundry/dotnet-core-buildpack,https://github.com/cloudfoundry/nodejs-buildpack,https://github.com/cloudfoundry/go-buildpack,https://github.com/cloudfoundry/python-buildpack,https://github.com/cloudfoundry/php-buildpack,https://github.com/cloudfoundry/binary-buildpack,https://github.com/cloudfoundry/nginx-buildpack
    runAfter:
    - source-upload
    taskSpec:
      metadata: {}
      params:
      - description: Ordered list of comma separated builtpacks to attempt.
        name: BUILDPACKS
        type: string
      - description: The run image apps will use as the base for IMAGE (output).
        name: RUN_IMAGE
        type: string
      - description: The image on which builds will run.
        name: BUILDER_IMAGE
        type: string
      - default: "false"
        description: Skip the detect phase
        name: SKIP_DETECT
        type: string
      - description: The destination of the image.
        name: IMAGE_DESTINATION
        type: string
      spec: null
      steps:
      - command:
        - /ko-app/installer
        image: gcr.io/kf-releases/installer-d148684b3032e4386ff76c190d42c7d0:latest
        name: copy-lifecycle
        resources: {}
        volumeMounts:
        - mountPath: /staging
          name: staging-tmp-dir
      - args:
        - -euc
        - |2

          echo "/staging/app /tmp/app" | xargs -n 1 cp -r /workspace/output/
          CF_STACK=cflinuxfs3 /workspace/builder \
            -buildArtifactsCacheDir=/tmp/cache \
            -buildDir=/tmp/app \
            -buildpacksDir=/tmp/buildpacks \
            -outputBuildArtifactsCache=/tmp/output-cache \
            -outputDroplet=/tmp/droplet \
            -outputMetadata=/tmp/result.json \
            "-buildpackOrder=$(inputs.params.BUILDPACKS)" \
            "-skipDetect=$(inputs.params.SKIP_DETECT)"
          cp -r /tmp/droplet /workspace/droplet

          cat << 'EOF' > /workspace/entrypoint.bash
          #!/usr/bin/env bash
          set -e

          if [[ "$@" == "" ]]; then
            exec /lifecycle/launcher "/home/vcap/app" "" ""
          else
            exec /lifecycle/launcher "/home/vcap/app" "$@" ""
          fi

          EOF
          chmod a+x /workspace/entrypoint.bash

          cat << 'EOF' > /workspace/Dockerfile
          FROM $(inputs.params.RUN_IMAGE)
          COPY launcher /lifecycle/launcher
          COPY entrypoint.bash /lifecycle/entrypoint.bash
          WORKDIR /home/vcap
          USER vcap:vcap
          COPY droplet droplet.tar.gz
          RUN tar -xzf droplet.tar.gz && rm droplet.tar.gz
          ENTRYPOINT ["/lifecycle/entrypoint.bash"]
          EOF
        command:
        - bash
        image: $(inputs.params.BUILDER_IMAGE)
        name: run-lifecycle
        resources: {}
        volumeMounts:
        - mountPath: /staging
          name: staging-tmp-dir
      - args:
        - --dockerfile
        - /workspace/Dockerfile
        - --context
        - /workspace
        - --destination
        - $(inputs.params.IMAGE_DESTINATION)
        - --oci-layout-path
        - /tekton/home/image-outputs/IMAGE
        - --single-snapshot
        - --no-push
        - --tarPath
        - /workspace/image.tar
        command:
        - /kaniko/executor
        image: gcr.io/kaniko-project/executor:latest
        name: build
        resources: {}
        volumeMounts:
        - mountPath: /cache
          name: cache-dir
        - mountPath: /workspace/staging
          name: staging-tmp-dir
        workingDir: /workspace
      - args:
        - publish
        - $(inputs.params.IMAGE_DESTINATION)
        - /workspace/image.tar
        command:
        - /ko-app/build-helpers
        image: gcr.io/kf-releases/build-helpers-58e723758a11c5e698f0be6f53cdecbc:latest
        name: publish
        resources: {}
        workingDir: /workspace
      volumes:
      - emptyDir: {}
        name: cache-dir
      - emptyDir: {}
        name: staging-tmp-dir
      workspaces:
      - name: output
    workspaces:
    - name: output
      workspace: output
  workspaces:
  - name: output
---
apiVersion: tekton.dev/v1beta1
kind: pipelinerun
metadata:
  creationTimestamp: null
  name: build-and-publish-run
spec:
  pipelineSpec:
    tasks:
    - name: source-upload
      params:
      - name: url
        value: https://github.com/cloudfoundry-samples/test-app
      taskRef:
        name: clone-code
      workspaces:
      - name: output
        workspace: output
    - name: push
      params:
      - name: RUN_IMAGE
        value: cloudfoundry/cflinuxfs3@sha256:5219e9e30000e43e5da17906581127b38fa6417f297f522e332a801e737928f5
      - name: BUILDER_IMAGE
        value: cloudfoundry/cflinuxfs3@sha256:5219e9e30000e43e5da17906581127b38fa6417f297f522e332a801e737928f5
      - name: SKIP_DETECT
        value: "false"
      - name: IMAGE_DESTINATION
        value: gcr.io/kf-source/testbuild
      - name: BUILDPACKS
        value: https://github.com/cloudfoundry/staticfile-buildpack,https://github.com/cloudfoundry/java-buildpack,https://github.com/cloudfoundry/ruby-buildpack,https://github.com/cloudfoundry/dotnet-core-buildpack,https://github.com/cloudfoundry/nodejs-buildpack,https://github.com/cloudfoundry/go-buildpack,https://github.com/cloudfoundry/python-buildpack,https://github.com/cloudfoundry/php-buildpack,https://github.com/cloudfoundry/binary-buildpack,https://github.com/cloudfoundry/nginx-buildpack
      runAfter:
      - source-upload
      taskSpec:
        metadata: {}
        params:
        - description: Ordered list of comma separated builtpacks to attempt.
          name: BUILDPACKS
          type: string
        - description: The run image apps will use as the base for IMAGE (output).
          name: RUN_IMAGE
          type: string
        - description: The image on which builds will run.
          name: BUILDER_IMAGE
          type: string
        - default: "false"
          description: Skip the detect phase
          name: SKIP_DETECT
          type: string
        - description: The destination of the image.
          name: IMAGE_DESTINATION
          type: string
        spec: null
        steps:
        - command:
          - /ko-app/installer
          image: gcr.io/kf-releases/installer-d148684b3032e4386ff76c190d42c7d0:latest
          name: copy-lifecycle
          resources: {}
          volumeMounts:
          - mountPath: /staging
            name: staging-tmp-dir
        - args:
          - -euc
          - |2

            echo "/staging/app /tmp/app" | xargs -n 1 cp -r /workspace/output/
            CF_STACK=cflinuxfs3 /workspace/builder \
              -buildArtifactsCacheDir=/tmp/cache \
              -buildDir=/tmp/app \
              -buildpacksDir=/tmp/buildpacks \
              -outputBuildArtifactsCache=/tmp/output-cache \
              -outputDroplet=/tmp/droplet \
              -outputMetadata=/tmp/result.json \
              "-buildpackOrder=$(inputs.params.BUILDPACKS)" \
              "-skipDetect=$(inputs.params.SKIP_DETECT)"
            cp -r /tmp/droplet /workspace/droplet

            cat << 'EOF' > /workspace/entrypoint.bash
            #!/usr/bin/env bash
            set -e

            if [[ "$@" == "" ]]; then
              exec /lifecycle/launcher "/home/vcap/app" "" ""
            else
              exec /lifecycle/launcher "/home/vcap/app" "$@" ""
            fi

            EOF
            chmod a+x /workspace/entrypoint.bash

            cat << 'EOF' > /workspace/Dockerfile
            FROM $(inputs.params.RUN_IMAGE)
            COPY launcher /lifecycle/launcher
            COPY entrypoint.bash /lifecycle/entrypoint.bash
            WORKDIR /home/vcap
            USER vcap:vcap
            COPY droplet droplet.tar.gz
            RUN tar -xzf droplet.tar.gz && rm droplet.tar.gz
            ENTRYPOINT ["/lifecycle/entrypoint.bash"]
            EOF
          command:
          - bash
          image: $(inputs.params.BUILDER_IMAGE)
          name: run-lifecycle
          resources: {}
          volumeMounts:
          - mountPath: /staging
            name: staging-tmp-dir
        - args:
          - --dockerfile
          - /workspace/Dockerfile
          - --context
          - /workspace
          - --destination
          - $(inputs.params.IMAGE_DESTINATION)
          - --oci-layout-path
          - /tekton/home/image-outputs/IMAGE
          - --single-snapshot
          - --no-push
          - --tarPath
          - /workspace/image.tar
          command:
          - /kaniko/executor
          image: gcr.io/kaniko-project/executor:latest
          name: build
          resources: {}
          volumeMounts:
          - mountPath: /cache
            name: cache-dir
          - mountPath: /workspace/staging
            name: staging-tmp-dir
          workingDir: /workspace
        - args:
          - publish
          - $(inputs.params.IMAGE_DESTINATION)
          - /workspace/image.tar
          command:
          - /ko-app/build-helpers
          image: gcr.io/kf-releases/build-helpers-58e723758a11c5e698f0be6f53cdecbc:latest
          name: publish
          resources: {}
          workingDir: /workspace
        volumes:
        - emptyDir: {}
          name: cache-dir
        - emptyDir: {}
          name: staging-tmp-dir
        workspaces:
        - name: output
      workspaces:
      - name: output
        workspace: output
    workspaces:
    - name: output
  workspaces:
  - name: output
    volumeClaimTemplate:
      metadata:
        creationTimestamp: null
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
status: {}
