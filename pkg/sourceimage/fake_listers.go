// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/v2/pkg/client/kf/listers/kf/v1alpha1 (interfaces: SpaceLister,SourcePackageLister,SourcePackageNamespaceLister)

// Package sourceimage is a generated GoMock package.
package sourceimage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/google/kf/v2/pkg/apis/kf/v1alpha1"
	v1alpha10 "github.com/google/kf/v2/pkg/client/kf/listers/kf/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
)

// FakeSpaceLister is a mock of SpaceLister interface.
type FakeSpaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeSpaceListerMockRecorder
}

// FakeSpaceListerMockRecorder is the mock recorder for FakeSpaceLister.
type FakeSpaceListerMockRecorder struct {
	mock *FakeSpaceLister
}

// NewFakeSpaceLister creates a new mock instance.
func NewFakeSpaceLister(ctrl *gomock.Controller) *FakeSpaceLister {
	mock := &FakeSpaceLister{ctrl: ctrl}
	mock.recorder = &FakeSpaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeSpaceLister) EXPECT() *FakeSpaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *FakeSpaceLister) Get(arg0 string) (*v1alpha1.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeSpaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeSpaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *FakeSpaceLister) List(arg0 labels.Selector) ([]*v1alpha1.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeSpaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeSpaceLister)(nil).List), arg0)
}

// FakeSourcePackageLister is a mock of SourcePackageLister interface.
type FakeSourcePackageLister struct {
	ctrl     *gomock.Controller
	recorder *FakeSourcePackageListerMockRecorder
}

// FakeSourcePackageListerMockRecorder is the mock recorder for FakeSourcePackageLister.
type FakeSourcePackageListerMockRecorder struct {
	mock *FakeSourcePackageLister
}

// NewFakeSourcePackageLister creates a new mock instance.
func NewFakeSourcePackageLister(ctrl *gomock.Controller) *FakeSourcePackageLister {
	mock := &FakeSourcePackageLister{ctrl: ctrl}
	mock.recorder = &FakeSourcePackageListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeSourcePackageLister) EXPECT() *FakeSourcePackageListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *FakeSourcePackageLister) List(arg0 labels.Selector) ([]*v1alpha1.SourcePackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.SourcePackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeSourcePackageListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeSourcePackageLister)(nil).List), arg0)
}

// SourcePackages mocks base method.
func (m *FakeSourcePackageLister) SourcePackages(arg0 string) v1alpha10.SourcePackageNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcePackages", arg0)
	ret0, _ := ret[0].(v1alpha10.SourcePackageNamespaceLister)
	return ret0
}

// SourcePackages indicates an expected call of SourcePackages.
func (mr *FakeSourcePackageListerMockRecorder) SourcePackages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcePackages", reflect.TypeOf((*FakeSourcePackageLister)(nil).SourcePackages), arg0)
}

// FakeSourcePackageNamespaceLister is a mock of SourcePackageNamespaceLister interface.
type FakeSourcePackageNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeSourcePackageNamespaceListerMockRecorder
}

// FakeSourcePackageNamespaceListerMockRecorder is the mock recorder for FakeSourcePackageNamespaceLister.
type FakeSourcePackageNamespaceListerMockRecorder struct {
	mock *FakeSourcePackageNamespaceLister
}

// NewFakeSourcePackageNamespaceLister creates a new mock instance.
func NewFakeSourcePackageNamespaceLister(ctrl *gomock.Controller) *FakeSourcePackageNamespaceLister {
	mock := &FakeSourcePackageNamespaceLister{ctrl: ctrl}
	mock.recorder = &FakeSourcePackageNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeSourcePackageNamespaceLister) EXPECT() *FakeSourcePackageNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *FakeSourcePackageNamespaceLister) Get(arg0 string) (*v1alpha1.SourcePackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.SourcePackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeSourcePackageNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeSourcePackageNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *FakeSourcePackageNamespaceLister) List(arg0 labels.Selector) ([]*v1alpha1.SourcePackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.SourcePackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeSourcePackageNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeSourcePackageNamespaceLister)(nil).List), arg0)
}
