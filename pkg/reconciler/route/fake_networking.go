// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/v2/pkg/client/networking/clientset/versioned/typed/networking/v1alpha3 (interfaces: NetworkingV1alpha3Interface,VirtualServiceInterface)

// Package route is a generated GoMock package.
package route

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha3 "github.com/google/kf/v2/pkg/apis/networking/v1alpha3"
	v1alpha30 "github.com/google/kf/v2/pkg/client/networking/clientset/versioned/typed/networking/v1alpha3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FakeNetworking is a mock of NetworkingV1alpha3Interface interface.
type FakeNetworking struct {
	ctrl     *gomock.Controller
	recorder *FakeNetworkingMockRecorder
}

// FakeNetworkingMockRecorder is the mock recorder for FakeNetworking.
type FakeNetworkingMockRecorder struct {
	mock *FakeNetworking
}

// NewFakeNetworking creates a new mock instance.
func NewFakeNetworking(ctrl *gomock.Controller) *FakeNetworking {
	mock := &FakeNetworking{ctrl: ctrl}
	mock.recorder = &FakeNetworkingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeNetworking) EXPECT() *FakeNetworkingMockRecorder {
	return m.recorder
}

// RESTClient mocks base method.
func (m *FakeNetworking) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *FakeNetworkingMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*FakeNetworking)(nil).RESTClient))
}

// ServiceEntries mocks base method.
func (m *FakeNetworking) ServiceEntries(arg0 string) v1alpha30.ServiceEntryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEntries", arg0)
	ret0, _ := ret[0].(v1alpha30.ServiceEntryInterface)
	return ret0
}

// ServiceEntries indicates an expected call of ServiceEntries.
func (mr *FakeNetworkingMockRecorder) ServiceEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEntries", reflect.TypeOf((*FakeNetworking)(nil).ServiceEntries), arg0)
}

// VirtualServices mocks base method.
func (m *FakeNetworking) VirtualServices(arg0 string) v1alpha30.VirtualServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualServices", arg0)
	ret0, _ := ret[0].(v1alpha30.VirtualServiceInterface)
	return ret0
}

// VirtualServices indicates an expected call of VirtualServices.
func (mr *FakeNetworkingMockRecorder) VirtualServices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualServices", reflect.TypeOf((*FakeNetworking)(nil).VirtualServices), arg0)
}

// FakeVirtualServiceInterface is a mock of VirtualServiceInterface interface.
type FakeVirtualServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *FakeVirtualServiceInterfaceMockRecorder
}

// FakeVirtualServiceInterfaceMockRecorder is the mock recorder for FakeVirtualServiceInterface.
type FakeVirtualServiceInterfaceMockRecorder struct {
	mock *FakeVirtualServiceInterface
}

// NewFakeVirtualServiceInterface creates a new mock instance.
func NewFakeVirtualServiceInterface(ctrl *gomock.Controller) *FakeVirtualServiceInterface {
	mock := &FakeVirtualServiceInterface{ctrl: ctrl}
	mock.recorder = &FakeVirtualServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeVirtualServiceInterface) EXPECT() *FakeVirtualServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *FakeVirtualServiceInterface) Create(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 v1.CreateOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *FakeVirtualServiceInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *FakeVirtualServiceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *FakeVirtualServiceInterfaceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *FakeVirtualServiceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *FakeVirtualServiceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *FakeVirtualServiceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeVirtualServiceInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *FakeVirtualServiceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*v1alpha3.VirtualServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha3.VirtualServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeVirtualServiceInterfaceMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *FakeVirtualServiceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *FakeVirtualServiceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *FakeVirtualServiceInterface) Update(arg0 context.Context, arg1 *v1alpha3.VirtualService, arg2 v1.UpdateOptions) (*v1alpha3.VirtualService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha3.VirtualService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *FakeVirtualServiceInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).Update), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *FakeVirtualServiceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *FakeVirtualServiceInterfaceMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*FakeVirtualServiceInterface)(nil).Watch), arg0, arg1)
}
