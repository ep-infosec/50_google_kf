// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kf/v2/pkg/client/kf/listers/kf/v1alpha1 (interfaces: RouteLister,RouteNamespaceLister,AppLister,AppNamespaceLister,SpaceLister,ServiceInstanceBindingLister,ServiceInstanceBindingNamespaceLister)

// Package route is a generated GoMock package.
package route

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/google/kf/v2/pkg/apis/kf/v1alpha1"
	v1alpha10 "github.com/google/kf/v2/pkg/client/kf/listers/kf/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
)

// FakeRouteLister is a mock of RouteLister interface.
type FakeRouteLister struct {
	ctrl     *gomock.Controller
	recorder *FakeRouteListerMockRecorder
}

// FakeRouteListerMockRecorder is the mock recorder for FakeRouteLister.
type FakeRouteListerMockRecorder struct {
	mock *FakeRouteLister
}

// NewFakeRouteLister creates a new mock instance.
func NewFakeRouteLister(ctrl *gomock.Controller) *FakeRouteLister {
	mock := &FakeRouteLister{ctrl: ctrl}
	mock.recorder = &FakeRouteListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeRouteLister) EXPECT() *FakeRouteListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *FakeRouteLister) List(arg0 labels.Selector) ([]*v1alpha1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeRouteListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeRouteLister)(nil).List), arg0)
}

// Routes mocks base method.
func (m *FakeRouteLister) Routes(arg0 string) v1alpha10.RouteNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes", arg0)
	ret0, _ := ret[0].(v1alpha10.RouteNamespaceLister)
	return ret0
}

// Routes indicates an expected call of Routes.
func (mr *FakeRouteListerMockRecorder) Routes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*FakeRouteLister)(nil).Routes), arg0)
}

// FakeRouteNamespaceLister is a mock of RouteNamespaceLister interface.
type FakeRouteNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeRouteNamespaceListerMockRecorder
}

// FakeRouteNamespaceListerMockRecorder is the mock recorder for FakeRouteNamespaceLister.
type FakeRouteNamespaceListerMockRecorder struct {
	mock *FakeRouteNamespaceLister
}

// NewFakeRouteNamespaceLister creates a new mock instance.
func NewFakeRouteNamespaceLister(ctrl *gomock.Controller) *FakeRouteNamespaceLister {
	mock := &FakeRouteNamespaceLister{ctrl: ctrl}
	mock.recorder = &FakeRouteNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeRouteNamespaceLister) EXPECT() *FakeRouteNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *FakeRouteNamespaceLister) Get(arg0 string) (*v1alpha1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeRouteNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeRouteNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *FakeRouteNamespaceLister) List(arg0 labels.Selector) ([]*v1alpha1.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeRouteNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeRouteNamespaceLister)(nil).List), arg0)
}

// FakeAppLister is a mock of AppLister interface.
type FakeAppLister struct {
	ctrl     *gomock.Controller
	recorder *FakeAppListerMockRecorder
}

// FakeAppListerMockRecorder is the mock recorder for FakeAppLister.
type FakeAppListerMockRecorder struct {
	mock *FakeAppLister
}

// NewFakeAppLister creates a new mock instance.
func NewFakeAppLister(ctrl *gomock.Controller) *FakeAppLister {
	mock := &FakeAppLister{ctrl: ctrl}
	mock.recorder = &FakeAppListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeAppLister) EXPECT() *FakeAppListerMockRecorder {
	return m.recorder
}

// Apps mocks base method.
func (m *FakeAppLister) Apps(arg0 string) v1alpha10.AppNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps", arg0)
	ret0, _ := ret[0].(v1alpha10.AppNamespaceLister)
	return ret0
}

// Apps indicates an expected call of Apps.
func (mr *FakeAppListerMockRecorder) Apps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps", reflect.TypeOf((*FakeAppLister)(nil).Apps), arg0)
}

// List mocks base method.
func (m *FakeAppLister) List(arg0 labels.Selector) ([]*v1alpha1.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeAppListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeAppLister)(nil).List), arg0)
}

// FakeAppNamespaceLister is a mock of AppNamespaceLister interface.
type FakeAppNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeAppNamespaceListerMockRecorder
}

// FakeAppNamespaceListerMockRecorder is the mock recorder for FakeAppNamespaceLister.
type FakeAppNamespaceListerMockRecorder struct {
	mock *FakeAppNamespaceLister
}

// NewFakeAppNamespaceLister creates a new mock instance.
func NewFakeAppNamespaceLister(ctrl *gomock.Controller) *FakeAppNamespaceLister {
	mock := &FakeAppNamespaceLister{ctrl: ctrl}
	mock.recorder = &FakeAppNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeAppNamespaceLister) EXPECT() *FakeAppNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *FakeAppNamespaceLister) Get(arg0 string) (*v1alpha1.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeAppNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeAppNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *FakeAppNamespaceLister) List(arg0 labels.Selector) ([]*v1alpha1.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeAppNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeAppNamespaceLister)(nil).List), arg0)
}

// FakeSpaceLister is a mock of SpaceLister interface.
type FakeSpaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeSpaceListerMockRecorder
}

// FakeSpaceListerMockRecorder is the mock recorder for FakeSpaceLister.
type FakeSpaceListerMockRecorder struct {
	mock *FakeSpaceLister
}

// NewFakeSpaceLister creates a new mock instance.
func NewFakeSpaceLister(ctrl *gomock.Controller) *FakeSpaceLister {
	mock := &FakeSpaceLister{ctrl: ctrl}
	mock.recorder = &FakeSpaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeSpaceLister) EXPECT() *FakeSpaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *FakeSpaceLister) Get(arg0 string) (*v1alpha1.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeSpaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeSpaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *FakeSpaceLister) List(arg0 labels.Selector) ([]*v1alpha1.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeSpaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeSpaceLister)(nil).List), arg0)
}

// FakeServiceInstanceBindingLister is a mock of ServiceInstanceBindingLister interface.
type FakeServiceInstanceBindingLister struct {
	ctrl     *gomock.Controller
	recorder *FakeServiceInstanceBindingListerMockRecorder
}

// FakeServiceInstanceBindingListerMockRecorder is the mock recorder for FakeServiceInstanceBindingLister.
type FakeServiceInstanceBindingListerMockRecorder struct {
	mock *FakeServiceInstanceBindingLister
}

// NewFakeServiceInstanceBindingLister creates a new mock instance.
func NewFakeServiceInstanceBindingLister(ctrl *gomock.Controller) *FakeServiceInstanceBindingLister {
	mock := &FakeServiceInstanceBindingLister{ctrl: ctrl}
	mock.recorder = &FakeServiceInstanceBindingListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeServiceInstanceBindingLister) EXPECT() *FakeServiceInstanceBindingListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *FakeServiceInstanceBindingLister) List(arg0 labels.Selector) ([]*v1alpha1.ServiceInstanceBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.ServiceInstanceBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeServiceInstanceBindingListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeServiceInstanceBindingLister)(nil).List), arg0)
}

// ServiceInstanceBindings mocks base method.
func (m *FakeServiceInstanceBindingLister) ServiceInstanceBindings(arg0 string) v1alpha10.ServiceInstanceBindingNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInstanceBindings", arg0)
	ret0, _ := ret[0].(v1alpha10.ServiceInstanceBindingNamespaceLister)
	return ret0
}

// ServiceInstanceBindings indicates an expected call of ServiceInstanceBindings.
func (mr *FakeServiceInstanceBindingListerMockRecorder) ServiceInstanceBindings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInstanceBindings", reflect.TypeOf((*FakeServiceInstanceBindingLister)(nil).ServiceInstanceBindings), arg0)
}

// FakeServiceInstanceBindingNamespaceLister is a mock of ServiceInstanceBindingNamespaceLister interface.
type FakeServiceInstanceBindingNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *FakeServiceInstanceBindingNamespaceListerMockRecorder
}

// FakeServiceInstanceBindingNamespaceListerMockRecorder is the mock recorder for FakeServiceInstanceBindingNamespaceLister.
type FakeServiceInstanceBindingNamespaceListerMockRecorder struct {
	mock *FakeServiceInstanceBindingNamespaceLister
}

// NewFakeServiceInstanceBindingNamespaceLister creates a new mock instance.
func NewFakeServiceInstanceBindingNamespaceLister(ctrl *gomock.Controller) *FakeServiceInstanceBindingNamespaceLister {
	mock := &FakeServiceInstanceBindingNamespaceLister{ctrl: ctrl}
	mock.recorder = &FakeServiceInstanceBindingNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FakeServiceInstanceBindingNamespaceLister) EXPECT() *FakeServiceInstanceBindingNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *FakeServiceInstanceBindingNamespaceLister) Get(arg0 string) (*v1alpha1.ServiceInstanceBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1alpha1.ServiceInstanceBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *FakeServiceInstanceBindingNamespaceListerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*FakeServiceInstanceBindingNamespaceLister)(nil).Get), arg0)
}

// List mocks base method.
func (m *FakeServiceInstanceBindingNamespaceLister) List(arg0 labels.Selector) ([]*v1alpha1.ServiceInstanceBinding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*v1alpha1.ServiceInstanceBinding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *FakeServiceInstanceBindingNamespaceListerMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*FakeServiceInstanceBindingNamespaceLister)(nil).List), arg0)
}
