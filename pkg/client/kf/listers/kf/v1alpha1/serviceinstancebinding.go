// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/kf/v2/pkg/apis/kf/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceInstanceBindingLister helps list ServiceInstanceBindings.
// All objects returned here must be treated as read-only.
type ServiceInstanceBindingLister interface {
	// List lists all ServiceInstanceBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceInstanceBinding, err error)
	// ServiceInstanceBindings returns an object that can list and get ServiceInstanceBindings.
	ServiceInstanceBindings(namespace string) ServiceInstanceBindingNamespaceLister
	ServiceInstanceBindingListerExpansion
}

// serviceInstanceBindingLister implements the ServiceInstanceBindingLister interface.
type serviceInstanceBindingLister struct {
	indexer cache.Indexer
}

// NewServiceInstanceBindingLister returns a new ServiceInstanceBindingLister.
func NewServiceInstanceBindingLister(indexer cache.Indexer) ServiceInstanceBindingLister {
	return &serviceInstanceBindingLister{indexer: indexer}
}

// List lists all ServiceInstanceBindings in the indexer.
func (s *serviceInstanceBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceInstanceBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceInstanceBinding))
	})
	return ret, err
}

// ServiceInstanceBindings returns an object that can list and get ServiceInstanceBindings.
func (s *serviceInstanceBindingLister) ServiceInstanceBindings(namespace string) ServiceInstanceBindingNamespaceLister {
	return serviceInstanceBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceInstanceBindingNamespaceLister helps list and get ServiceInstanceBindings.
// All objects returned here must be treated as read-only.
type ServiceInstanceBindingNamespaceLister interface {
	// List lists all ServiceInstanceBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceInstanceBinding, err error)
	// Get retrieves the ServiceInstanceBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceInstanceBinding, error)
	ServiceInstanceBindingNamespaceListerExpansion
}

// serviceInstanceBindingNamespaceLister implements the ServiceInstanceBindingNamespaceLister
// interface.
type serviceInstanceBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceInstanceBindings in the indexer for a given namespace.
func (s serviceInstanceBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceInstanceBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceInstanceBinding))
	})
	return ret, err
}

// Get retrieves the ServiceInstanceBinding from the indexer for a given namespace and name.
func (s serviceInstanceBindingNamespaceLister) Get(name string) (*v1alpha1.ServiceInstanceBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceinstancebinding"), name)
	}
	return obj.(*v1alpha1.ServiceInstanceBinding), nil
}
