// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/google/kf/v2/pkg/apis/kf/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeScales implements ScaleInterface
type FakeScales struct {
	Fake *FakeKfV1alpha1
	ns   string
}

var scalesResource = schema.GroupVersionResource{Group: "kf.dev", Version: "v1alpha1", Resource: "scales"}

var scalesKind = schema.GroupVersionKind{Group: "kf.dev", Version: "v1alpha1", Kind: "Scale"}

// Get takes name of the scale, and returns the corresponding scale object, and an error if there is any.
func (c *FakeScales) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Scale, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(scalesResource, c.ns, name), &v1alpha1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Scale), err
}

// List takes label and field selectors, and returns the list of Scales that match those selectors.
func (c *FakeScales) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ScaleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(scalesResource, scalesKind, c.ns, opts), &v1alpha1.ScaleList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ScaleList), err
}

// Watch returns a watch.Interface that watches the requested scales.
func (c *FakeScales) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(scalesResource, c.ns, opts))

}

// Create takes the representation of a scale and creates it.  Returns the server's representation of the scale, and an error, if there is any.
func (c *FakeScales) Create(ctx context.Context, scale *v1alpha1.Scale, opts v1.CreateOptions) (result *v1alpha1.Scale, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(scalesResource, c.ns, scale), &v1alpha1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Scale), err
}

// Update takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *FakeScales) Update(ctx context.Context, scale *v1alpha1.Scale, opts v1.UpdateOptions) (result *v1alpha1.Scale, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(scalesResource, c.ns, scale), &v1alpha1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Scale), err
}

// Delete takes name of the scale and deletes it. Returns an error if one occurs.
func (c *FakeScales) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(scalesResource, c.ns, name, opts), &v1alpha1.Scale{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeScales) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(scalesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ScaleList{})
	return err
}

// Patch applies the patch and returns the patched scale.
func (c *FakeScales) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Scale, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(scalesResource, c.ns, name, pt, data, subresources...), &v1alpha1.Scale{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Scale), err
}
