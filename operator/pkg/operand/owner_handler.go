// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package operand

import (
	"context"
	"fmt"

	"kf-operator/pkg/apis/operand/v1alpha1"
	kfsysteminformer "kf-operator/pkg/client/injection/informers/kfsystem/v1alpha1/kfsystem"
	caoinformer "kf-operator/pkg/client/injection/informers/operand/v1alpha1/clusteractiveoperand"
	kfsystemlister "kf-operator/pkg/client/listers/kfsystem/v1alpha1"
	operandlister "kf-operator/pkg/client/listers/operand/v1alpha1"
	"kf-operator/pkg/operand/injection/dynamichelper"

	multierror "github.com/hashicorp/go-multierror"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/dynamic"
)

const kfOperatorName = "kfsystem"

// OwnerHandler is an interface for handling OwnerReferences.
type OwnerHandler interface {
	// HandleOwnerRefs handles OwnerReference for a given ClusterActiveOperand or ActiveOperand.
	HandleOwnerRefs(context.Context, *metav1.OwnerReference, []v1alpha1.LiveRef, runtime.Object) error
}

type ownerHandler struct {
	dh             dynamichelper.Interface
	injector       OwnerInjector
	caoLister      operandlister.ClusterActiveOperandLister
	kfSystemLister kfsystemlister.KfSystemLister
}

// CreateOwnerHandlerWithCtx creates an OwnerHandler instance with context.
func CreateOwnerHandlerWithCtx(ctx context.Context) OwnerHandler {
	return CreateOwnerHandler(CreateOwnerInjector(ctx),
		dynamichelper.Get(ctx),
		kfsysteminformer.Get(ctx).Lister(),
		caoinformer.Get(ctx).Lister())
}

// CreateOwnerHandler creates an OwnerHandler instance.
func CreateOwnerHandler(injector OwnerInjector, dh dynamichelper.Interface,
	kfSystemLister kfsystemlister.KfSystemLister,
	caoLister operandlister.ClusterActiveOperandLister) OwnerHandler {
	return &ownerHandler{
		injector:       injector,
		dh:             dh,
		kfSystemLister: kfSystemLister,
		caoLister:      caoLister,
	}
}

func (o ownerHandler) HandleOwnerRefs(ctx context.Context, ownerRef *metav1.OwnerReference, liveRef []v1alpha1.LiveRef, caoOrAo runtime.Object) error {
	shouldClean, err := o.shouldCleanUpOwnerRef(ctx, caoOrAo)
	if err != nil {
		return err
	}
	if shouldClean {
		return o.cleanUpOwnerRefs(ctx, liveRef)
	}
	return o.injector.InjectOwnerRefs(ctx, ownerRef, liveRef)
}

func (o ownerHandler) shouldCleanUpOwnerRef(ctx context.Context, caoOrAo runtime.Object) (bool, error) {
	// The relationship of Operand, ClusterActiveOperand, and ActiveOperand is:
	// Operand -> ClusterActiveOperand -> ActiveOperand
	// We need to find out for a given ClusterActiveOperand/ActiveOperand, if it is
	// generated by "serving" Operand.
	// The idea is to get the ClusterActiveOperand, and check the OwnerReference of it
	// to see if the owner is "serving" Operand.

	var cao *v1alpha1.ClusterActiveOperand
	var ao *v1alpha1.ActiveOperand
	if c, ok := caoOrAo.(*v1alpha1.ClusterActiveOperand); ok {
		cao = c
	} else if a, ok := caoOrAo.(*v1alpha1.ActiveOperand); ok {
		ao = a
	} else {
		return false, fmt.Errorf("the Object input can only be ClusterActiveOperand or ActiveOperand")
	}

	// If the input is ActiveOperand, then we need to find out the
	// ClusterActiveOperand that creates the ActiveOperand.
	// The ClusterActiveOperand can be found by using the name of ActiveOperand
	// because the ClusterActiveOperand has the same name as the ActiveOperand.
	targetCao := cao
	var err error
	if targetCao == nil {
		targetCao, err = o.caoLister.Get(ao.Name)
		if err != nil {
			return false, err
		}
	}

	// Check if the ClusterActiveOperand is created by "serving" Operand.
	ownerOperand := targetCao.GetOwnerReferences()
	if len(ownerOperand) != 1 {
		return false, fmt.Errorf("ClusterActiveOperand %s requires having 1 Operand as OwnerRef", cao.Name)
	}
	return ownerOperand[0].Name == KfOperandName, nil
}

func (o ownerHandler) cleanUpOwnerRefs(ctx context.Context, live []v1alpha1.LiveRef) error {
	var result *multierror.Error
	for _, ref := range live {
		err := o.cleanOwnerRef(ctx, ref)
		result = multierror.Append(result, err)
	}
	return result.ErrorOrNil()
}

func (o ownerHandler) cleanOwnerRef(ctx context.Context, ref v1alpha1.LiveRef) error {
	gvr, err := o.deriveGVR(ref)
	if err != nil {
		return err
	}

	var r dynamic.ResourceInterface = o.dh.Resource(*gvr)
	if ref.Namespace != "" {
		r = r.(dynamic.NamespaceableResourceInterface).Namespace(ref.Namespace)
	}
	unstr, err := r.Get(ctx, ref.Name, metav1.GetOptions{})
	if err != nil {
		if errors.IsNotFound(err) {
			return nil
		}
		return err
	}
	if len(unstr.GetOwnerReferences()) == 0 {
		return nil
	}
	unstr.SetOwnerReferences([]metav1.OwnerReference{})
	_, err = r.Update(ctx, unstr, metav1.UpdateOptions{})
	return err
}

func (o ownerHandler) deriveGVR(ref v1alpha1.LiveRef) (*schema.GroupVersionResource, error) {
	if ref.GroupVersionResource() != nil {
		return ref.GroupVersionResource(), nil
	}
	m, err := o.dh.RESTMapping(*ref.GroupKind())
	if err != nil {
		return nil, err
	}
	return &m.Resource, nil
}
