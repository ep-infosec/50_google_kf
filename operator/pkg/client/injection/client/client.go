// Code generated by injection-gen. DO NOT EDIT.

package client

import (
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	v1alpha1 "kf-operator/pkg/apis/kfsystem/v1alpha1"
	operandv1alpha1 "kf-operator/pkg/apis/operand/v1alpha1"
	versioned "kf-operator/pkg/client/clientset/versioned"
	typedkfv1alpha1 "kf-operator/pkg/client/clientset/versioned/typed/kfsystem/v1alpha1"
	typedoperandv1alpha1 "kf-operator/pkg/client/clientset/versioned/typed/operand/v1alpha1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	discovery "k8s.io/client-go/discovery"
	dynamic "k8s.io/client-go/dynamic"
	rest "k8s.io/client-go/rest"
	injection "knative.dev/pkg/injection"
	dynamicclient "knative.dev/pkg/injection/clients/dynamicclient"
	logging "knative.dev/pkg/logging"
)

func init() {
	injection.Default.RegisterClient(withClientFromConfig)
	injection.Default.RegisterClientFetcher(func(ctx context.Context) interface{} {
		return Get(ctx)
	})
	injection.Dynamic.RegisterDynamicClient(withClientFromDynamic)
}

// Key is used as the key for associating information with a context.Context.
type Key struct{}

func withClientFromConfig(ctx context.Context, cfg *rest.Config) context.Context {
	return context.WithValue(ctx, Key{}, versioned.NewForConfigOrDie(cfg))
}

func withClientFromDynamic(ctx context.Context) context.Context {
	return context.WithValue(ctx, Key{}, &wrapClient{dyn: dynamicclient.Get(ctx)})
}

// Get extracts the versioned.Interface client from the context.
func Get(ctx context.Context) versioned.Interface {
	untyped := ctx.Value(Key{})
	if untyped == nil {
		if injection.GetConfig(ctx) == nil {
			logging.FromContext(ctx).Panic(
				"Unable to fetch kf-operator/pkg/client/clientset/versioned.Interface from context. This context is not the application context (which is typically given to constructors via sharedmain).")
		} else {
			logging.FromContext(ctx).Panic(
				"Unable to fetch kf-operator/pkg/client/clientset/versioned.Interface from context.")
		}
	}
	return untyped.(versioned.Interface)
}

type wrapClient struct {
	dyn dynamic.Interface
}

var _ versioned.Interface = (*wrapClient)(nil)

func (w *wrapClient) Discovery() discovery.DiscoveryInterface {
	panic("Discovery called on dynamic client!")
}

func convert(from interface{}, to runtime.Object) error {
	bs, err := json.Marshal(from)
	if err != nil {
		return fmt.Errorf("Marshal() = %w", err)
	}
	if err := json.Unmarshal(bs, to); err != nil {
		return fmt.Errorf("Unmarshal() = %w", err)
	}
	return nil
}

// KfV1alpha1 retrieves the KfV1alpha1Client
func (w *wrapClient) KfV1alpha1() typedkfv1alpha1.KfV1alpha1Interface {
	return &wrapKfV1alpha1{
		dyn: w.dyn,
	}
}

type wrapKfV1alpha1 struct {
	dyn dynamic.Interface
}

func (w *wrapKfV1alpha1) RESTClient() rest.Interface {
	panic("RESTClient called on dynamic client!")
}

func (w *wrapKfV1alpha1) KfSystems() typedkfv1alpha1.KfSystemInterface {
	return &wrapKfV1alpha1KfSystemImpl{
		dyn: w.dyn.Resource(schema.GroupVersionResource{
			Group:    "kf.dev",
			Version:  "v1alpha1",
			Resource: "kfsystems",
		}),
	}
}

type wrapKfV1alpha1KfSystemImpl struct {
	dyn dynamic.NamespaceableResourceInterface
}

var _ typedkfv1alpha1.KfSystemInterface = (*wrapKfV1alpha1KfSystemImpl)(nil)

func (w *wrapKfV1alpha1KfSystemImpl) Create(ctx context.Context, in *v1alpha1.KfSystem, opts v1.CreateOptions) (*v1alpha1.KfSystem, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "kf.dev",
		Version: "v1alpha1",
		Kind:    "KfSystem",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Create(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &v1alpha1.KfSystem{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapKfV1alpha1KfSystemImpl) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return w.dyn.Delete(ctx, name, opts)
}

func (w *wrapKfV1alpha1KfSystemImpl) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	return w.dyn.DeleteCollection(ctx, opts, listOpts)
}

func (w *wrapKfV1alpha1KfSystemImpl) Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.KfSystem, error) {
	uo, err := w.dyn.Get(ctx, name, opts)
	if err != nil {
		return nil, err
	}
	out := &v1alpha1.KfSystem{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapKfV1alpha1KfSystemImpl) List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.KfSystemList, error) {
	uo, err := w.dyn.List(ctx, opts)
	if err != nil {
		return nil, err
	}
	out := &v1alpha1.KfSystemList{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapKfV1alpha1KfSystemImpl) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.KfSystem, err error) {
	uo, err := w.dyn.Patch(ctx, name, pt, data, opts)
	if err != nil {
		return nil, err
	}
	out := &v1alpha1.KfSystem{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapKfV1alpha1KfSystemImpl) Update(ctx context.Context, in *v1alpha1.KfSystem, opts v1.UpdateOptions) (*v1alpha1.KfSystem, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "kf.dev",
		Version: "v1alpha1",
		Kind:    "KfSystem",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Update(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &v1alpha1.KfSystem{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapKfV1alpha1KfSystemImpl) UpdateStatus(ctx context.Context, in *v1alpha1.KfSystem, opts v1.UpdateOptions) (*v1alpha1.KfSystem, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "kf.dev",
		Version: "v1alpha1",
		Kind:    "KfSystem",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.UpdateStatus(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &v1alpha1.KfSystem{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapKfV1alpha1KfSystemImpl) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return nil, errors.New("NYI: Watch")
}

// OperandV1alpha1 retrieves the OperandV1alpha1Client
func (w *wrapClient) OperandV1alpha1() typedoperandv1alpha1.OperandV1alpha1Interface {
	return &wrapOperandV1alpha1{
		dyn: w.dyn,
	}
}

type wrapOperandV1alpha1 struct {
	dyn dynamic.Interface
}

func (w *wrapOperandV1alpha1) RESTClient() rest.Interface {
	panic("RESTClient called on dynamic client!")
}

func (w *wrapOperandV1alpha1) ActiveOperands(namespace string) typedoperandv1alpha1.ActiveOperandInterface {
	return &wrapOperandV1alpha1ActiveOperandImpl{
		dyn: w.dyn.Resource(schema.GroupVersionResource{
			Group:    "operand.run.cloud.google.com",
			Version:  "v1alpha1",
			Resource: "activeoperands",
		}),

		namespace: namespace,
	}
}

type wrapOperandV1alpha1ActiveOperandImpl struct {
	dyn dynamic.NamespaceableResourceInterface

	namespace string
}

var _ typedoperandv1alpha1.ActiveOperandInterface = (*wrapOperandV1alpha1ActiveOperandImpl)(nil)

func (w *wrapOperandV1alpha1ActiveOperandImpl) Create(ctx context.Context, in *operandv1alpha1.ActiveOperand, opts v1.CreateOptions) (*operandv1alpha1.ActiveOperand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "ActiveOperand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Namespace(w.namespace).Create(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return w.dyn.Namespace(w.namespace).Delete(ctx, name, opts)
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	return w.dyn.Namespace(w.namespace).DeleteCollection(ctx, opts, listOpts)
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) Get(ctx context.Context, name string, opts v1.GetOptions) (*operandv1alpha1.ActiveOperand, error) {
	uo, err := w.dyn.Namespace(w.namespace).Get(ctx, name, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) List(ctx context.Context, opts v1.ListOptions) (*operandv1alpha1.ActiveOperandList, error) {
	uo, err := w.dyn.Namespace(w.namespace).List(ctx, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ActiveOperandList{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *operandv1alpha1.ActiveOperand, err error) {
	uo, err := w.dyn.Namespace(w.namespace).Patch(ctx, name, pt, data, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) Update(ctx context.Context, in *operandv1alpha1.ActiveOperand, opts v1.UpdateOptions) (*operandv1alpha1.ActiveOperand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "ActiveOperand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Namespace(w.namespace).Update(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) UpdateStatus(ctx context.Context, in *operandv1alpha1.ActiveOperand, opts v1.UpdateOptions) (*operandv1alpha1.ActiveOperand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "ActiveOperand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Namespace(w.namespace).UpdateStatus(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ActiveOperandImpl) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return nil, errors.New("NYI: Watch")
}

func (w *wrapOperandV1alpha1) ClusterActiveOperands() typedoperandv1alpha1.ClusterActiveOperandInterface {
	return &wrapOperandV1alpha1ClusterActiveOperandImpl{
		dyn: w.dyn.Resource(schema.GroupVersionResource{
			Group:    "operand.run.cloud.google.com",
			Version:  "v1alpha1",
			Resource: "clusteractiveoperands",
		}),
	}
}

type wrapOperandV1alpha1ClusterActiveOperandImpl struct {
	dyn dynamic.NamespaceableResourceInterface
}

var _ typedoperandv1alpha1.ClusterActiveOperandInterface = (*wrapOperandV1alpha1ClusterActiveOperandImpl)(nil)

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) Create(ctx context.Context, in *operandv1alpha1.ClusterActiveOperand, opts v1.CreateOptions) (*operandv1alpha1.ClusterActiveOperand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "ClusterActiveOperand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Create(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ClusterActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return w.dyn.Delete(ctx, name, opts)
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	return w.dyn.DeleteCollection(ctx, opts, listOpts)
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) Get(ctx context.Context, name string, opts v1.GetOptions) (*operandv1alpha1.ClusterActiveOperand, error) {
	uo, err := w.dyn.Get(ctx, name, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ClusterActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) List(ctx context.Context, opts v1.ListOptions) (*operandv1alpha1.ClusterActiveOperandList, error) {
	uo, err := w.dyn.List(ctx, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ClusterActiveOperandList{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *operandv1alpha1.ClusterActiveOperand, err error) {
	uo, err := w.dyn.Patch(ctx, name, pt, data, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ClusterActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) Update(ctx context.Context, in *operandv1alpha1.ClusterActiveOperand, opts v1.UpdateOptions) (*operandv1alpha1.ClusterActiveOperand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "ClusterActiveOperand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Update(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ClusterActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) UpdateStatus(ctx context.Context, in *operandv1alpha1.ClusterActiveOperand, opts v1.UpdateOptions) (*operandv1alpha1.ClusterActiveOperand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "ClusterActiveOperand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.UpdateStatus(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.ClusterActiveOperand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1ClusterActiveOperandImpl) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return nil, errors.New("NYI: Watch")
}

func (w *wrapOperandV1alpha1) Operands() typedoperandv1alpha1.OperandInterface {
	return &wrapOperandV1alpha1OperandImpl{
		dyn: w.dyn.Resource(schema.GroupVersionResource{
			Group:    "operand.run.cloud.google.com",
			Version:  "v1alpha1",
			Resource: "operands",
		}),
	}
}

type wrapOperandV1alpha1OperandImpl struct {
	dyn dynamic.NamespaceableResourceInterface
}

var _ typedoperandv1alpha1.OperandInterface = (*wrapOperandV1alpha1OperandImpl)(nil)

func (w *wrapOperandV1alpha1OperandImpl) Create(ctx context.Context, in *operandv1alpha1.Operand, opts v1.CreateOptions) (*operandv1alpha1.Operand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "Operand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Create(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.Operand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1OperandImpl) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return w.dyn.Delete(ctx, name, opts)
}

func (w *wrapOperandV1alpha1OperandImpl) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	return w.dyn.DeleteCollection(ctx, opts, listOpts)
}

func (w *wrapOperandV1alpha1OperandImpl) Get(ctx context.Context, name string, opts v1.GetOptions) (*operandv1alpha1.Operand, error) {
	uo, err := w.dyn.Get(ctx, name, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.Operand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1OperandImpl) List(ctx context.Context, opts v1.ListOptions) (*operandv1alpha1.OperandList, error) {
	uo, err := w.dyn.List(ctx, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.OperandList{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1OperandImpl) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *operandv1alpha1.Operand, err error) {
	uo, err := w.dyn.Patch(ctx, name, pt, data, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.Operand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1OperandImpl) Update(ctx context.Context, in *operandv1alpha1.Operand, opts v1.UpdateOptions) (*operandv1alpha1.Operand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "Operand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.Update(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.Operand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1OperandImpl) UpdateStatus(ctx context.Context, in *operandv1alpha1.Operand, opts v1.UpdateOptions) (*operandv1alpha1.Operand, error) {
	in.SetGroupVersionKind(schema.GroupVersionKind{
		Group:   "operand.run.cloud.google.com",
		Version: "v1alpha1",
		Kind:    "Operand",
	})
	uo := &unstructured.Unstructured{}
	if err := convert(in, uo); err != nil {
		return nil, err
	}
	uo, err := w.dyn.UpdateStatus(ctx, uo, opts)
	if err != nil {
		return nil, err
	}
	out := &operandv1alpha1.Operand{}
	if err := convert(uo, out); err != nil {
		return nil, err
	}
	return out, nil
}

func (w *wrapOperandV1alpha1OperandImpl) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return nil, errors.New("NYI: Watch")
}
