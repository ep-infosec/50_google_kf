// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"
	kfv1alpha1 "kf-operator/pkg/client/clientset/versioned/typed/kfsystem/v1alpha1"
	operandv1alpha1 "kf-operator/pkg/client/clientset/versioned/typed/operand/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	KfV1alpha1() kfv1alpha1.KfV1alpha1Interface
	OperandV1alpha1() operandv1alpha1.OperandV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	kfV1alpha1      *kfv1alpha1.KfV1alpha1Client
	operandV1alpha1 *operandv1alpha1.OperandV1alpha1Client
}

// KfV1alpha1 retrieves the KfV1alpha1Client
func (c *Clientset) KfV1alpha1() kfv1alpha1.KfV1alpha1Interface {
	return c.kfV1alpha1
}

// OperandV1alpha1 retrieves the OperandV1alpha1Client
func (c *Clientset) OperandV1alpha1() operandv1alpha1.OperandV1alpha1Interface {
	return c.operandV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.kfV1alpha1, err = kfv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.operandV1alpha1, err = operandv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.kfV1alpha1 = kfv1alpha1.NewForConfigOrDie(c)
	cs.operandV1alpha1 = operandv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.kfV1alpha1 = kfv1alpha1.New(c)
	cs.operandV1alpha1 = operandv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
